#include <cstdio>
#include <vector>
#include <queue>
using namespace std;

vector<int> graph[12];
bool visit[12];

void dfs(int node);
void bfs(int node);

int main() {
	graph[1].push_back(2); graph[1].push_back(3);
	graph[2].push_back(4);
	graph[3].push_back(5); graph[3].push_back(6);
	graph[4].push_back(7); graph[4].push_back(8);
	graph[5].push_back(9);
	graph[6].push_back(10); graph[6].push_back(11);

	//dfs(1);
	//bfs(1);

	return 0;
}

void dfs(int node) {
	visit[node] = true;
	printf("%d ", node);

	for (int i = 0; i < graph[node].size(); ++i) {
		int next = graph[node][i];

		if (visit[next] == false) {
			dfs(next);
		}
	}
}

void bfs(int node) {
	queue<int> que;

	visit[node] = true;
	que.push(node);

	while (!que.empty()) {
		int present_node = que.front();
		printf("%d ", present_node);
		que.pop();

		for (int i = 0; i < graph[present_node].size(); ++i) {
			int next = graph[present_node][i];

			if (visit[next] == false) {
				visit[next] = true;
				que.push(next);
			}
		}
	}
}
